name: Test Unity Setup Action
on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test-basic-setup:
    name: Test Basic Setup (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Test Unity Setup (Auto-detect)
        uses: ./.github/actions/setup-unity
        with:
          project-path: "sandbox/UnityApplication"
          cache: "true"
      - name: Verify Unity Installation
        run: unity -version

  test-with-modules:
    name: Test Module Installation (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            modules: "webgl,windows-il2cpp,mac-il2cpp"
          - os: macos-latest
            modules: "webgl,ios,android,mac-il2cpp"
          - os: windows-latest
            modules: "webgl,android,ios,windows-il2cpp,mac-il2cpp,linux-il2cpp"
    steps:
      - uses: actions/checkout@v4
      - name: Test Unity Setup with Modules
        uses: ./.github/actions/setup-unity
        with:
          unity-version: "6000.1.9f1 (ed7b183fd33d)"
          unity-modules: ${{ matrix.modules }}
          cache: "true"
      - name: Verify Module Installation
        shell: bash
        run: |
          echo "Verifying Unity installation and module availability"
          unity -version

          unity -batchmode -quit -nographics -logFile - -projectPath sandbox/UnityApplication || echo "Unity headless test completed"

          echo "Checking for installed modules: ${{ matrix.modules }}"
          unity_cmd=$(which unity)
          echo "Unity command location: $unity_cmd"

  test-platform-specific:
    name: Test Platform-Specific Features (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            test-features: "Linux-specific module support"
          - os: macos-latest
            test-features: "macOS application bundle handling"
          - os: windows-latest
            test-features: "Windows executable installation"
    steps:
      - uses: actions/checkout@v4
      - name: Test Platform Features
        uses: ./.github/actions/setup-unity
        with:
          unity-version: "6000.1.9f1 (ed7b183fd33d)"
          unity-modules: "webgl"
          cache: "true"
      - name: Verify Platform-Specific Installation
        shell: bash
        run: |
          echo "Testing ${{ matrix.test-features }}"
          unity -version

          case "$RUNNER_OS" in
            "Linux")
              echo "Verifying Linux installation structure"
              unity_path=$(which unity)
              ls -la "$unity_path"
              ;;
            "macOS")
              echo "Verifying macOS application bundle"
              unity_path=$(which unity)
              ls -la "$unity_path"
              ;;
            "Windows")
              echo "Verifying Windows executable wrapper"
              unity_path=$(which unity)
              cat "$unity_path"
              ;;
          esac

  prime-cache:
    name: Test Caching (1/2 - Prime Cache)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install and Save to Cache
        uses: ./.github/actions/setup-unity
        with:
          unity-version: "6000.1.9f1 (ed7b183fd33d)"
          unity-modules: "webgl"
          cache: "true"

  use-cache:
    name: Test Caching (2/2 - Use Cache)
    runs-on: ${{ matrix.os }}
    needs: prime-cache
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Second Install (Should be a cache-hit)
        id: use_cache_step
        uses: ./.github/actions/setup-unity
        with:
          unity-version: "6000.1.9f1 (ed7b183fd33d)"
          unity-modules: "webgl"
          cache: "true"
      - name: Verify Cache was Used
        if: steps.use_cache_step.outputs.download-cache-hit != 'true'
        run: |
          echo "::error::The download cache was not used on the second run."
          exit 1
      - name: Verify Unity Installation from Cache
        run: unity -version

  test-error-handling:
    name: Test Error Handling (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Test Invalid Version (Should Fail)
        id: test_invalid
        continue-on-error: true
        uses: ./.github/actions/setup-unity
        with:
          unity-version: "invalid"
      - name: Verify Invalid Version Failed
        if: steps.test_invalid.outcome == 'success'
        run: |
          echo "::error::Action should have failed with invalid version."
          exit 1

  test-cross-platform-consistency:
    name: Test Cross-Platform Consistency
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Unity with Standard Configuration
        uses: ./.github/actions/setup-unity
        with:
          unity-version: "6000.1.9f1 (ed7b183fd33d)"
          unity-modules: "webgl"
          cache: "true"
      - name: Test Unified Command Interface
        run: |
          unity -version

          unity -batchmode -quit -nographics -logFile - || echo "Command executed successfully"

          command -v unity

          echo "Cross-platform consistency verified for $RUNNER_OS"
