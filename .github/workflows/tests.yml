name: 🧪 Tests

on:
    push:
        branches:
            - main
            - develop
    pull_request:
        branches:
            - main
            - develop

permissions:
    contents: read

jobs:
    test-dotnet-actions:
        name: Test .NET Actions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🔧 Setup .NET
              uses: ./.github/actions/setup-dotnet
              with:
                  global-json-file: sandbox/ConsoleApplication/global.json

            - name: 🧪 Test .NET Project
              uses: ./.github/actions/test-dotnet
              with:
                  project: sandbox/ConsoleApplication
                  configuration: Debug

            - name: 🎨 Format .NET Project
              uses: ./.github/actions/format-dotnet
              with:
                  project: sandbox/ConsoleApplication

            - name: 🏗️ Build .NET Project
              uses: ./.github/actions/build-dotnet
              with:
                  project: sandbox/ConsoleApplication
                  configuration: Release
                  version: 1.0.0-test
                  define-symbols: TEST_BUILD

            - name: 📦 Pack .NET Project
              id: pack-dotnet
              uses: ./.github/actions/pack-dotnet
              with:
                  project: sandbox/ConsoleApplication
                  configuration: Release
                  version: 1.0.0-test
                  name: ConsoleApplication-test

            - name: ✅ Verify .NET Package
              shell: bash
              run: |
                  PACKAGE_PATH="${{ steps.pack-dotnet.outputs.package }}"

                  if [ -z "${PACKAGE_PATH}" ]; then
                    echo "::error::Package path is empty"
                    exit 1
                  fi

                  if [ ! -f "${PACKAGE_PATH}" ]; then
                    echo "::error::Package file not found: ${PACKAGE_PATH}"
                    exit 1
                  fi

                  echo "✅ Package verified: ${PACKAGE_PATH}"

    test-godot-actions:
        name: Test Godot Actions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🔧 Setup .NET
              uses: ./.github/actions/setup-dotnet
              with:
                  global-json-file: sandbox/GodotApplication/global.json

            - name: 🎮 Setup Godot
              uses: ./.github/actions/setup-godot
              with:
                  global-json-file: sandbox/GodotApplication/global.json
                  target-platforms: Android
                  cache: "true"

            - name: 🧪 Test Godot Project
              uses: ./.github/actions/test-godot
              with:
                  project: sandbox/GodotApplication
                  global-json-file: sandbox/GodotApplication/global.json

    test-unity-actions:
        name: Test Unity Actions
        runs-on: macos-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🤖 Setup Android
              uses: ./.github/actions/setup-android
              with:
                  java-version: "17"
                  android-packages: "platform-tools platforms;android-34 build-tools;34.0.0 ndk;25.1.8937393"

            - name: 🎮 Setup Unity
              uses: ./.github/actions/setup-unity
              with:
                  project: sandbox/UnityApplication
                  unity-modules: android
                  cache: "true"

    test-android-setup:
        name: Test Android Setup
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🤖 Setup Android
              uses: ./.github/actions/setup-android
              with:
                  java-version: "17"
                  android-packages: "platform-tools platforms;android-34 build-tools;34.0.0"

    test-xcode-setup:
        name: Test Xcode Setup
        runs-on: macos-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🍎 Setup Xcode
              uses: ./.github/actions/setup-xcode
              with:
                  xcode-version: "16.2"

    test-utility-actions:
        name: Test Utility Actions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - name: 🆙 Bump Version
              id: bump-version
              uses: ./.github/actions/bump-version
              with:
                  version-type: patch

            - name: 📝 Generate Changelog
              uses: ./.github/actions/generate-changelog
              with:
                  next-version: ${{ steps.bump-version.outputs.next-version }}

    test-package-actions:
        name: Test Package Actions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 📦 Pack Godot Addon
              id: pack-godot
              uses: ./.github/actions/pack-godot-addon
              with:
                  addon: sandbox/GodotApplication/addons/TestAddon
                  version: 1.0.0-test
                  filename: TestAddon-test

            - name: ✅ Verify Godot Package
              shell: bash
              run: |
                  PACKAGE_PATH="${{ steps.pack-godot.outputs.package }}"
                  MODIFIED_FILES="${{ steps.pack-godot.outputs.modified-files }}"

                  if [ -z "${PACKAGE_PATH}" ]; then
                    echo "::error::Package path is empty"
                    exit 1
                  fi

                  if [ ! -f "${PACKAGE_PATH}" ]; then
                    echo "::error::Package file not found: ${PACKAGE_PATH}"
                    exit 1
                  fi

                  if [ -z "${MODIFIED_FILES}" ]; then
                    echo "::error::Modified files path is empty"
                    exit 1
                  fi

                  if [ ! -f "${MODIFIED_FILES}" ]; then
                    echo "::error::Modified file not found: ${MODIFIED_FILES}"
                    exit 1
                  fi

                  if ! grep -q 'version="1.0.0-test"' "${MODIFIED_FILES}"; then
                    echo "::error::Version not updated in plugin.cfg"
                    exit 1
                  fi

                  echo "✅ Godot package verified"
                  echo "  Package: ${PACKAGE_PATH}"
                  echo "  Modified: ${MODIFIED_FILES}"

            - name: 📦 Pack Unity Package
              id: pack-unity
              uses: ./.github/actions/pack-unity-package
              with:
                  package: sandbox/UnityApplication/Packages/com.test.package
                  version: 2.0.0-test
                  filename: com.test.package-test

            - name: ✅ Verify Unity Package
              shell: bash
              run: |
                  PACKAGE_PATH="${{ steps.pack-unity.outputs.package }}"
                  MODIFIED_FILES="${{ steps.pack-unity.outputs.modified-files }}"

                  if [ -z "${PACKAGE_PATH}" ]; then
                    echo "::error::Package path is empty"
                    exit 1
                  fi

                  if [ ! -f "${PACKAGE_PATH}" ]; then
                    echo "::error::Package file not found: ${PACKAGE_PATH}"
                    exit 1
                  fi

                  if [ -z "${MODIFIED_FILES}" ]; then
                    echo "::error::Modified files path is empty"
                    exit 1
                  fi

                  if [ ! -f "${MODIFIED_FILES}" ]; then
                    echo "::error::Modified file not found: ${MODIFIED_FILES}"
                    exit 1
                  fi

                  if ! grep -q '"version": "2.0.0-test"' "${MODIFIED_FILES}"; then
                    echo "::error::Version not updated in package.json"
                    exit 1
                  fi

                  echo "✅ Unity package verified"
                  echo "  Package: ${PACKAGE_PATH}"
                  echo "  Modified: ${MODIFIED_FILES}"

    test-dotnet-version-update:
        name: Test .NET Version Update
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🔧 Setup .NET
              uses: ./.github/actions/setup-dotnet
              with:
                  global-json-file: sandbox/ConsoleApplication/global.json

            - name: 🏗️ Build .NET Project
              uses: ./.github/actions/build-dotnet
              with:
                  project: sandbox/ConsoleApplication
                  configuration: Release
                  version: 2.5.7-test

            - name: 📝 Create Test Directory.Build.props
              shell: bash
              run: |
                  cat > Directory.Build.props << 'EOF'
                  <Project>
                    <PropertyGroup>
                      <Version>0.0.0</Version>
                      <AssemblyVersion>$(Version)</AssemblyVersion>
                      <FileVersion>$(Version)</FileVersion>
                      <PackageVersion>$(Version)</PackageVersion>
                    </PropertyGroup>
                  </Project>
                  EOF

            - name: 📦 Pack with Directory.Build.props
              id: pack-with-props
              uses: ./.github/actions/pack-dotnet
              with:
                  project: sandbox/ConsoleApplication
                  configuration: Release
                  version: 2.5.7-test
                  name: ConsoleApplication-version-test
                  directory-build-props: Directory.Build.props

            - name: ✅ Verify Version Updates
              shell: bash
              run: |
                  MODIFIED_FILES="${{ steps.pack-with-props.outputs.modified-files }}"

                  echo "Modified files output:"
                  echo "${MODIFIED_FILES}"
                  echo "---"

                  if [ -z "${MODIFIED_FILES}" ]; then
                    echo "::warning::No modified files reported (properties may use references)"
                  else
                    if echo "${MODIFIED_FILES}" | grep -q "Directory.Build.props"; then
                      echo "✓ Directory.Build.props was modified"

                      if ! grep -q '<Version>2.5.7-test</Version>' Directory.Build.props; then
                        echo "::error::Version not updated in Directory.Build.props"
                        cat Directory.Build.props
                        exit 1
                      fi
                      echo "✓ Version updated to 2.5.7-test"

                      if grep -q '<AssemblyVersion>2.5.7-test</AssemblyVersion>' Directory.Build.props; then
                        echo "::error::Property reference was replaced (should remain as reference)"
                        cat Directory.Build.props
                        exit 1
                      fi
                      echo "✓ Property references preserved"

                      if ! grep -q '<AssemblyVersion>$(Version)</AssemblyVersion>' Directory.Build.props; then
                        echo "::error::Property reference was lost"
                        cat Directory.Build.props
                        exit 1
                      fi
                      echo "✓ All property references intact"
                    fi
                  fi

                  echo ""
                  echo "✅ Version update test completed successfully"

    test-format-actions:
        name: Test Format Actions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 🔧 Setup .NET
              uses: ./.github/actions/setup-dotnet
              with:
                  global-json-file: sandbox/ConsoleApplication/global.json

            - name: 🎨 Test Format Files Action
              uses: ./.github/actions/format-files
              with:
                  files: "**/*.{yml,yaml,json,md,sh}"
                  ignore-path: ".gitignore"

            - name: 🎨 Test Format .NET Action
              uses: ./.github/actions/format-dotnet
              with:
                  project: sandbox/ConsoleApplication

    test-artifact-actions:
        name: Test Artifact Actions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 📝 Create Test Files
              shell: bash
              run: |
                  mkdir -p test-artifacts/dir1
                  mkdir -p test-artifacts/dir2
                  echo "Test file 1" > test-artifacts/dir1/file1.txt
                  echo "Test file 2" > test-artifacts/dir2/file2.txt
                  echo "Root file" > test-artifacts/root.txt

            - name: 📤 Upload Test Artifact
              id: upload-test
              uses: ./.github/actions/upload-artifact
              with:
                  name: test-artifact
                  path: test-artifacts/**
                  retention-days: 1

            - name: ✅ Verify Upload Outputs
              shell: bash
              run: |
                  ARTIFACT_ID="${{ steps.upload-test.outputs.artifact-id }}"
                  ARTIFACT_URL="${{ steps.upload-test.outputs.artifact-url }}"
                  ARTIFACT_DIGEST="${{ steps.upload-test.outputs.artifact-digest }}"

                  if [ -z "${ARTIFACT_ID}" ]; then
                    echo "::error::artifact-id output is empty"
                    exit 1
                  fi

                  if [ -z "${ARTIFACT_URL}" ]; then
                    echo "::error::artifact-url output is empty"
                    exit 1
                  fi

                  if [ -z "${ARTIFACT_DIGEST}" ]; then
                    echo "::error::artifact-digest output is empty"
                    exit 1
                  fi

                  echo "✅ Upload outputs verified"
                  echo "  ID: ${ARTIFACT_ID}"
                  echo "  URL: ${ARTIFACT_URL}"
                  echo "  Digest: ${ARTIFACT_DIGEST}"

            - name: 🧹 Clean Test Files
              shell: bash
              run: rm -rf test-artifacts

            - name: 📥 Download Test Artifact (Custom Path)
              id: download-custom
              uses: ./.github/actions/download-artifact
              with:
                  name: test-artifact
                  path: downloaded-artifacts

            - name: ✅ Verify Downloaded Files (Custom Path)
              shell: bash
              run: |
                  DOWNLOAD_PATH="${{ steps.download-custom.outputs.download-path }}"

                  if [ -z "${DOWNLOAD_PATH}" ]; then
                    echo "::error::download-path output is empty"
                    exit 1
                  fi

                  echo "Download path: ${DOWNLOAD_PATH}"

                  if [ ! -f "downloaded-artifacts/test-artifacts/dir1/file1.txt" ]; then
                    echo "::error::file1.txt not in custom path"
                    exit 1
                  fi

                  if [ ! -f "downloaded-artifacts/test-artifacts/dir2/file2.txt" ]; then
                    echo "::error::file2.txt not in custom path"
                    exit 1
                  fi

                  if [ ! -f "downloaded-artifacts/test-artifacts/root.txt" ]; then
                    echo "::error::root.txt not in custom path"
                    exit 1
                  fi

                  if [ -f "downloaded-artifacts/test-artifact.meta" ]; then
                    echo "::error::Metadata file should be removed"
                    exit 1
                  fi

                  echo "✅ Files verified in custom path, metadata removed"

            - name: 🧹 Clean Downloaded Files
              shell: bash
              run: rm -rf downloaded-artifacts

            - name: 📥 Download Test Artifact (Restore Paths)
              id: download-restore
              uses: ./.github/actions/download-artifact
              with:
                  name: test-artifact

            - name: ✅ Verify Restored Files
              shell: bash
              run: |
                  DOWNLOAD_PATH="${{ steps.download-restore.outputs.download-path }}"

                  if [ -z "${DOWNLOAD_PATH}" ]; then
                    echo "::error::download-path output is empty"
                    exit 1
                  fi

                  echo "Download path: ${DOWNLOAD_PATH}"

                  if [ ! -f "test-artifacts/dir1/file1.txt" ]; then
                    echo "::error::file1.txt not restored"
                    exit 1
                  fi

                  if [ ! -f "test-artifacts/dir2/file2.txt" ]; then
                    echo "::error::file2.txt not restored"
                    exit 1
                  fi

                  if [ ! -f "test-artifacts/root.txt" ]; then
                    echo "::error::root.txt not restored"
                    exit 1
                  fi

                  if [ -f "test-artifacts/test-artifact.meta" ]; then
                    echo "::error::Metadata should not be in restored files"
                    exit 1
                  fi

                  if [ -f "test-artifact.meta" ]; then
                    echo "::error::Metadata should not be in workspace"
                    exit 1
                  fi

                  CONTENT1=$(cat test-artifacts/dir1/file1.txt)
                  CONTENT2=$(cat test-artifacts/dir2/file2.txt)
                  CONTENT3=$(cat test-artifacts/root.txt)

                  if [ "${CONTENT1}" != "Test file 1" ]; then
                    echo "::error::file1.txt wrong content"
                    exit 1
                  fi

                  if [ "${CONTENT2}" != "Test file 2" ]; then
                    echo "::error::file2.txt wrong content"
                    exit 1
                  fi

                  if [ "${CONTENT3}" != "Root file" ]; then
                    echo "::error::root.txt wrong content"
                    exit 1
                  fi

                  echo "✅ All files verified in original paths, no metadata"

    test-artifact-workspace-boundaries:
        name: Test Workspace Boundary Handling
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 📝 Create Files Inside Workspace
              shell: bash
              run: |
                  mkdir -p workspace-files/subdir
                  echo "Inside workspace" > workspace-files/inside.txt
                  echo "Nested file" > workspace-files/subdir/nested.txt

            - name: 📝 Create Files Outside Workspace
              shell: bash
              run: |
                  mkdir -p "${HOME}/.external-files"
                  echo "Outside workspace" > "${HOME}/.external-files/outside.txt"
                  echo "External data" > "${HOME}/.external-files/data.bin"

            - name: 📤 Upload Mixed Location Files
              uses: ./.github/actions/upload-artifact
              with:
                  name: mixed-locations
                  path: |
                      workspace-files/**
                      ~/.external-files/outside.txt
                      ~/.external-files/data.bin
                  retention-days: 1

            - name: 🧹 Clean All Files
              shell: bash
              run: |
                  rm -rf workspace-files
                  rm -rf "${HOME}/.external-files"

            - name: 📥 Download Mixed Location Files (Custom Path)
              uses: ./.github/actions/download-artifact
              with:
                  name: mixed-locations
                  path: downloaded-mixed

            - name: ✅ Verify Mixed Location Structure (Custom Path)
              shell: bash
              run: |
                  echo "Checking downloaded structure..."
                  find downloaded-mixed -type f

                  if [ ! -f "downloaded-mixed/workspace-files/inside.txt" ]; then
                    echo "::error::Workspace file structure not preserved"
                    exit 1
                  fi

                  if [ ! -f "downloaded-mixed/workspace-files/subdir/nested.txt" ]; then
                    echo "::error::Nested workspace file not found"
                    exit 1
                  fi

                  if [ ! -f "downloaded-mixed/outside.txt" ]; then
                    echo "::error::External file not found in flat structure"
                    exit 1
                  fi

                  if [ ! -f "downloaded-mixed/data.bin" ]; then
                    echo "::error::External binary file not found"
                    exit 1
                  fi

                  if [ -f "downloaded-mixed/.external-files/outside.txt" ]; then
                    echo "::error::External files should not preserve home directory structure"
                    exit 1
                  fi

                  echo "✅ Mixed location structure verified in custom path"

            - name: 🧹 Clean Downloaded Files
              shell: bash
              run: rm -rf downloaded-mixed

            - name: 📥 Download Mixed Location Files (Restore Paths)
              uses: ./.github/actions/download-artifact
              with:
                  name: mixed-locations

            - name: ✅ Verify Restored Paths
              shell: bash
              run: |
                  echo "Checking restored structure..."
                  find workspace-files -type f 2>/dev/null || echo "No workspace-files directory"
                  ls -la outside.txt data.bin 2>/dev/null || echo "External files not in workspace root"

                  if [ ! -f "workspace-files/inside.txt" ]; then
                    echo "::error::Workspace file not restored to original path"
                    exit 1
                  fi

                  if [ ! -f "workspace-files/subdir/nested.txt" ]; then
                    echo "::error::Nested workspace file not restored"
                    exit 1
                  fi

                  if [ ! -f "outside.txt" ]; then
                    echo "::error::External file not found in workspace root"
                    exit 1
                  fi

                  if [ ! -f "data.bin" ]; then
                    echo "::error::External binary not found in workspace root"
                    exit 1
                  fi

                  INSIDE_CONTENT=$(cat workspace-files/inside.txt)
                  NESTED_CONTENT=$(cat workspace-files/subdir/nested.txt)
                  OUTSIDE_CONTENT=$(cat outside.txt)
                  DATA_CONTENT=$(cat data.bin)

                  if [ "${INSIDE_CONTENT}" != "Inside workspace" ]; then
                    echo "::error::Inside workspace file has wrong content"
                    exit 1
                  fi

                  if [ "${NESTED_CONTENT}" != "Nested file" ]; then
                    echo "::error::Nested file has wrong content"
                    exit 1
                  fi

                  if [ "${OUTSIDE_CONTENT}" != "Outside workspace" ]; then
                    echo "::error::Outside workspace file has wrong content"
                    exit 1
                  fi

                  if [ "${DATA_CONTENT}" != "External data" ]; then
                    echo "::error::External data file has wrong content"
                    exit 1
                  fi

                  echo "✅ All files restored correctly with proper boundary handling"

    test-artifact-package-simulation:
        name: Test Package Artifact Simulation
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 📝 Create Workspace Source Files
              shell: bash
              run: |
                  mkdir -p src/MyProject
                  echo '<Project><Version>1.0.0</Version></Project>' > src/MyProject/MyProject.csproj
                  echo '<Project><Version>1.0.0</Version></Project>' > Directory.Build.props

            - name: 📦 Simulate Package Creation Outside Workspace
              shell: bash
              run: |
                  mkdir -p "${HOME}/.nupkgs"
                  echo "Mock NuGet Package Content" > "${HOME}/.nupkgs/MyProject-1.2.3.nupkg"

            - name: 📝 Simulate Version Update in Workspace
              shell: bash
              run: |
                  sed -i 's/<Version>1.0.0<\/Version>/<Version>1.2.3<\/Version>/' src/MyProject/MyProject.csproj
                  sed -i 's/<Version>1.0.0<\/Version>/<Version>1.2.3<\/Version>/' Directory.Build.props

            - name: 📤 Upload Package (Outside Workspace)
              uses: ./.github/actions/upload-artifact
              with:
                  name: package-nupkg
                  path: ~/.nupkgs/MyProject-1.2.3.nupkg
                  retention-days: 1

            - name: 📤 Upload Modified Files (Inside Workspace)
              uses: ./.github/actions/upload-artifact
              with:
                  name: modified-source-files
                  path: |
                      src/MyProject/MyProject.csproj
                      Directory.Build.props
                  retention-days: 1

            - name: 🧹 Clean Everything
              shell: bash
              run: |
                  rm -rf "${HOME}/.nupkgs"
                  rm -rf src
                  rm -f Directory.Build.props

            - name: 📥 Download Package
              uses: ./.github/actions/download-artifact
              with:
                  name: package-nupkg
                  path: packages

            - name: 📥 Download Modified Files
              uses: ./.github/actions/download-artifact
              with:
                  name: modified-source-files

            - name: ✅ Verify Package and Modified Files
              shell: bash
              run: |
                  if [ ! -f "packages/MyProject-1.2.3.nupkg" ]; then
                    echo "::error::Package not found in custom path"
                    exit 1
                  fi

                  if [ ! -f "src/MyProject/MyProject.csproj" ]; then
                    echo "::error::csproj not restored to original path"
                    exit 1
                  fi

                  if [ ! -f "Directory.Build.props" ]; then
                    echo "::error::Directory.Build.props not restored to workspace root"
                    exit 1
                  fi

                  if ! grep -q '<Version>1.2.3</Version>' src/MyProject/MyProject.csproj; then
                    echo "::error::Version not updated in csproj"
                    exit 1
                  fi

                  if ! grep -q '<Version>1.2.3</Version>' Directory.Build.props; then
                    echo "::error::Version not updated in Directory.Build.props"
                    exit 1
                  fi

                  echo "✅ Package simulation test passed"
                  echo "  ✓ External package uploaded correctly"
                  echo "  ✓ Workspace files restored to original paths"
                  echo "  ✓ Version updates preserved"

    test-artifact-file-extensions:
        name: Test Artifact File Extensions
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 📝 Create Test Files
              shell: bash
              run: |
                  mkdir -p outputs
                  echo "Report content" > outputs/report.txt
                  echo '{"data": "test"}' > outputs/data.json

            - name: 📤 Upload report.txt
              uses: ./.github/actions/upload-artifact
              with:
                  name: report.txt
                  path: outputs/report.txt
                  retention-days: 1

            - name: 📤 Upload data.json
              uses: ./.github/actions/upload-artifact
              with:
                  name: data.json
                  path: outputs/data.json
                  retention-days: 1

            - name: 🧹 Clean Original Files
              shell: bash
              run: rm -rf outputs

            - name: 📥 Download report.txt
              uses: ./.github/actions/download-artifact
              with:
                  name: report.txt

            - name: 📥 Download data.json
              uses: ./.github/actions/download-artifact
              with:
                  name: data.json

            - name: ✅ Verify File Extension Artifacts
              shell: bash
              run: |
                  if [ ! -f "outputs/report.txt" ]; then
                    echo "::error::report.txt not restored"
                    exit 1
                  fi

                  if [ ! -f "outputs/data.json" ]; then
                    echo "::error::data.json not restored"
                    exit 1
                  fi

                  if [ -f "outputs/report.txt.meta" ] || [ -f "report.txt.meta" ]; then
                    echo "::error::report.txt.meta should be removed"
                    exit 1
                  fi

                  if [ -f "outputs/data.json.meta" ] || [ -f "data.json.meta" ]; then
                    echo "::error::data.json.meta should be removed"
                    exit 1
                  fi

                  REPORT_CONTENT=$(cat outputs/report.txt)
                  DATA_CONTENT=$(cat outputs/data.json)

                  if [ "${REPORT_CONTENT}" != "Report content" ]; then
                    echo "::error::report.txt wrong content"
                    exit 1
                  fi

                  if [ "${DATA_CONTENT}" != '{"data": "test"}' ]; then
                    echo "::error::data.json wrong content"
                    exit 1
                  fi

                  echo "✅ File extension artifacts verified"

    test-artifact-macos-compatibility:
        name: Test Artifact Actions on macOS
        runs-on: macos-latest
        steps:
            - name: 📂 Checkout Code
              uses: actions/checkout@v5

            - name: 📝 Create Test Files
              shell: bash
              run: |
                  mkdir -p test-files/nested
                  echo "macOS test 1" > test-files/file1.txt
                  echo "macOS test 2" > test-files/nested/file2.txt

            - name: 📝 Create External Files
              shell: bash
              run: |
                  mkdir -p "${HOME}/.macos-external"
                  echo "External macOS file" > "${HOME}/.macos-external/external.txt"

            - name: 📤 Upload Mixed Files on macOS
              uses: ./.github/actions/upload-artifact
              with:
                  name: macos-test
                  path: |
                      test-files/**
                      ~/.macos-external/external.txt
                  retention-days: 1

            - name: 🧹 Clean Files
              shell: bash
              run: |
                  rm -rf test-files
                  rm -rf "${HOME}/.macos-external"

            - name: 📥 Download Files
              uses: ./.github/actions/download-artifact
              with:
                  name: macos-test

            - name: ✅ Verify macOS Compatibility
              shell: bash
              run: |
                  if [ ! -f "test-files/file1.txt" ]; then
                    echo "::error::file1.txt not restored on macOS"
                    exit 1
                  fi

                  if [ ! -f "test-files/nested/file2.txt" ]; then
                    echo "::error::Nested file not restored on macOS"
                    exit 1
                  fi

                  if [ ! -f "external.txt" ]; then
                    echo "::error::External file not found on macOS"
                    exit 1
                  fi

                  CONTENT1=$(cat test-files/file1.txt)
                  CONTENT2=$(cat test-files/nested/file2.txt)
                  CONTENT3=$(cat external.txt)

                  if [ "${CONTENT1}" != "macOS test 1" ]; then
                    echo "::error::file1.txt wrong content on macOS"
                    exit 1
                  fi

                  if [ "${CONTENT2}" != "macOS test 2" ]; then
                    echo "::error::file2.txt wrong content on macOS"
                    exit 1
                  fi

                  if [ "${CONTENT3}" != "External macOS file" ]; then
                    echo "::error::External file wrong content on macOS"
                    exit 1
                  fi

                  echo "✅ macOS artifact handling verified"
                  echo "  ✓ bash 3.2 compatibility confirmed"
                  echo "  ✓ Workspace boundary handling works"
                  echo "  ✓ Path restoration successful"
