name: Build Godot
description: Build Godot project for selected platforms.

inputs:
  project:
    description: The relative path to the Godot project folder.
    required: true
  global-json-file:
    description: Path to the `global.json` file to extract the Godot version.
    required: true
  version:
    description: The build version to use for the output (e.g., 1.0.0).
    required: true
  platform:
    description: The target platform for the build (e.g., Android, iOS).
    required: true
  preset:
    description: The export preset name to use from the Godot project settings.
    required: true
  artifact:
    description: Desired name for the uploaded NuGet package artifact.
    required: true
  duration:
    description: Retention duration (in days) for the uploaded artifact. A value of 0 uses the default retention period.
    required: false
    default: "1"
  android-keystore:
    description: Base64-encoded Android keystore.
    required: false
    default: ""
  android-keystore-user:
    description: Keystore username for Android export.
    required: false
    default: ""
  android-keystore-password:
    description: Keystore password for Android export.
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: ðŸ“– Get Godot Version
      id: get_godot_version
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_godot_version.sh"
        godot_version=$("${{ github.action_path }}/scripts/get_godot_version.sh" "${{ inputs.global-json-file }}")
        echo godot_version="$godot_version" >> "$GITHUB_OUTPUT"

    - name: ðŸ“‚ Get Templates Directory
      id: get_templates_dir
      if: inputs.platform == 'Android'
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_templates_dir.sh"
        templates_dir=$("${{ github.action_path }}/scripts/get_templates_dir.sh" "${{ runner.os }}")
        echo templates_dir=${templates_dir} >> "$GITHUB_OUTPUT"

    - name: ðŸ“‚ Install Android Template
      if: inputs.platform == 'Android'
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/install_android_template.sh"
        "${{ github.action_path }}/scripts/install_android_template.sh" "${{ inputs.project }}" "${{ steps.get_templates_dir.outputs.templates_dir }}" "${{ steps.get_godot_version.outputs.godot_version }}"

    - name: ðŸ“‚ Get Export Options
      id: get_export_options
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_export_options.sh"
        export_options=$("${{ github.action_path }}/scripts/get_export_options.sh" "${{ inputs.platform }}" "${{ inputs.version }}")
        echo export_options=${export_options} >> "$GITHUB_OUTPUT"

    - name: ðŸ“‚ Export Project
      id: export_project
      shell: bash
      run: |
        if ! mkdir -p ${artifacts_dir}; then
           echo "Error: Failed to create directory ${artifacts_dir}."
           exit 1
        fi

        case "${{ inputs.platform }}" in
          "Android")
            chmod +x "${{ github.action_path }}/scripts/export_android_project.sh"
            file=$("${{ github.action_path }}/scripts/export_android_project.sh" "${{ inputs.project }}" "${{ inputs.preset }}" "${{ inputs.artifact }}" "${{ inputs.android-keystore }}" "${{ inputs.android-keystore-user }}" "${{ inputs.android-keystore-password }}")
            ;;
          "iOS")
            echo "Exporting for iOS platform..."
            ;;
          *)
            echo "Error: Unsupported platform ${{ inputs.platform }}"

          echo file=${file} >> "$GITHUB_OUTPUT"

    - name: ðŸ“¤ Upload Android Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact }}
        path: ~/.artifacts/${{ inputs.artifact }}.apk
        retention-days: 1
