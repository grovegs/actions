name: Build Godot
description: Build Godot project for selected platforms.

inputs:
  project:
    description: The relative path to the Godot project folder.
    required: true
  global-json-file:
    description: Path to the `global.json` file to extract the Godot version.
    required: true
  version:
    description: The build version to use for the output (e.g., 1.0.0).
    required: true
  platform:
    description: The target platform for the build (e.g., Android, iOS).
    required: true
  preset:
    description: The export preset name to use from the Godot project settings.
    required: true
  artifact:
    description: Desired name for the uploaded NuGet package artifact.
    required: true
  keystore:
    description: Desired name for the uploaded NuGet package artifact.
    required: true
  keystore-user:
    description: Desired name for the uploaded NuGet package artifact.
    required: true
  keystore-password:
    description: Desired name for the uploaded NuGet package artifact.
    required: true
  duration:
    description: Retention duration (in days) for the uploaded artifact. A value of 0 uses the default retention period.
    required: false
    default: "1"

runs:
  using: composite
  steps:
    - name: ðŸ“‚ Get Templates Directory
      id: get_templates_dir
      if: inputs.platform == 'Android'
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_templates_dir.sh"
        templates_dir=$("${{ github.action_path }}/scripts/get_templates_dir.sh" "${{ runner.os }}")
        echo templates_dir=${templates_dir} >> "$GITHUB_OUTPUT"

    - name: ðŸ“– Get Godot Version
      id: get_godot_version
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_godot_version.sh"
        godot_version=$("${{ github.action_path }}/scripts/get_godot_version.sh" "${{ inputs.global-json-file }}")
        echo godot_version="$godot_version" >> "$GITHUB_OUTPUT"

    - name: ðŸ“‚ Install Android Template
      if: inputs.platform == 'Android'
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/install_android_template.sh"
        "${{ github.action_path }}/scripts/install_android_template.sh" "${{ inputs.project }}" "${{ steps.get_templates_dir.outputs.templates_dir }}" "${{ steps.get_godot_version.outputs.godot_version }}"

    - name: ðŸ“‚ Get Export Options
      id: get_export_options
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_export_options.sh"
        export_options=$("${{ github.action_path }}/scripts/get_export_options.sh" "${{ inputs.platform }}" "${{ inputs.version }}")
        echo export_options=${export_options} >> "$GITHUB_OUTPUT"

    - name: ðŸ“‚ Export Project
      shell: bash
      run: |
        # Ensure the artifacts directory exists
        if ! mkdir -p ~/.artifacts; then
          echo "Error: Failed to create directory ~/.artifacts."
          exit 1
        fi

        echo "Artifacts directory contents:"
        ls -la ~/.artifacts

        # Ensure the Android directory exists
        if ! mkdir -p ~/.android; then
          echo "Error: Failed to create directory ~/.android."
          exit 1
        fi

        if ! echo -n "${{ inputs.keystore }}" | base64 -d > ~/.android/release.keystore; then
          echo "Error: Failed to decode and save the Android keystore."
          exit 1
        fi

        echo "Android directory contents after saving keystore:"
        ls -la ~/.android

        # Verify the keystore file
        if [ ! -s ~/.android/release.keystore ]; then
          echo "Error: Keystore file is empty or invalid."
          exit 1
        fi

        echo "GODOT_ANDROID_KEYSTORE_RELEASE_PATH=~/.android/release.keystore" >> "$GITHUB_ENV"
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_USER=${{ inputs.keystore-user }}" >> "$GITHUB_ENV"
        echo "GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD=${{ inputs.keystore-password }}" >> "$GITHUB_ENV"

        # Run the Godot export command
        if ! godot --path "${{ inputs.project }}" --headless --export-release "${{ inputs.preset }}" ~/.artifacts/${{ inputs.artifact }}.apk; then
          echo "Error: Godot export failed."
          exit 1
        fi

        echo "Export completed successfully. Artifact is located in ~/.artifacts."

    - name: ðŸ“¤ Upload Android Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact }}
        path: ~/.artifacts/${{ inputs.artifact }}.apk
        retention-days: 1
