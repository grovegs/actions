name: Setup Unity
description: Download, install, and cache Unity for macOS and Linux platforms with iOS and Android support.

inputs:
    project:
        description: Path to the Unity project directory
        required: false
        default: "."
    unity-version:
        description: Unity version to install with revision such as 6000.1.9f1 (ed7b183fd33d)
        required: false
        default: ""
    unity-modules:
        description: Comma-separated list of target modules to install such as ios, android
        required: false
        default: ""
    cache:
        description: Cache downloaded Unity installers
        required: false
        default: "true"

runs:
    using: composite
    steps:
        - name: ‚úÖ Validate Platform Support
          shell: bash
          run: |
              if [[ "${RUNNER_OS}" != "macOS" && "${RUNNER_OS}" != "Linux" ]]; then
                echo "::error::This action only supports macOS and Linux. Unsupported platform: ${RUNNER_OS}"
                exit 1
              fi
              echo "::notice::Platform validation passed for ${RUNNER_OS}"

        - name: üìñ Get Unity Info
          id: get-unity-info
          shell: bash
          env:
              PROJECT_PATH: ${{ inputs.project }}
              UNITY_VERSION_INPUT: ${{ inputs.unity-version }}
          run: |
              chmod +x "${{ github.action_path }}/scripts/get_unity_info.sh"
              "${{ github.action_path }}/scripts/get_unity_info.sh"

        - name: üîß Prepare Paths and Module ID
          id: prepare-paths
          shell: bash
          env:
              UNITY_VERSION: ${{ steps.get-unity-info.outputs.version }}
              UNITY_MODULES: ${{ inputs.unity-modules }}
          run: |
              chmod +x "${{ github.action_path }}/scripts/get_modules_id.sh"
              MODULES_ID=$("${{ github.action_path }}/scripts/get_modules_id.sh")
              DOWNLOAD_DIR="${HOME}/.unity/${UNITY_VERSION}"
              if [[ "${RUNNER_OS}" == "macOS" ]]; then
                ARCH="arm64"
              else
                ARCH="x64"
              fi
              {
                echo "download-dir=${DOWNLOAD_DIR}"
                echo "cache-key=unity-download-${UNITY_VERSION}-${RUNNER_OS}-${ARCH}-${MODULES_ID}"
              } >> "${GITHUB_OUTPUT}"
              echo "::notice::Download directory: ${DOWNLOAD_DIR}"
              echo "::notice::Cache key: unity-download-${UNITY_VERSION}-${RUNNER_OS}-${ARCH}-${MODULES_ID}"

        - name: üíæ Cache Downloaded Installers
          id: cache-downloads
          if: inputs.cache == 'true'
          uses: actions/cache@v4
          with:
              path: ${{ steps.prepare-paths.outputs.download-dir }}
              key: ${{ steps.prepare-paths.outputs.cache-key }}

        - name: ‚¨áÔ∏è Download Unity
          if: steps.cache-downloads.outputs.cache-hit != 'true' || inputs.cache != 'true'
          shell: bash
          env:
              UNITY_VERSION: ${{ steps.get-unity-info.outputs.version }}
              UNITY_CHANGESET: ${{ steps.get-unity-info.outputs.changeset }}
              UNITY_MODULES: ${{ inputs.unity-modules }}
              DOWNLOAD_DIR: ${{ steps.prepare-paths.outputs.download-dir }}
          run: |
              chmod +x "${{ github.action_path }}/scripts/download_unity.sh"
              "${{ github.action_path }}/scripts/download_unity.sh"

        - name: ‚öôÔ∏è Install Unity
          id: install-unity
          shell: bash
          env:
              UNITY_VERSION: ${{ steps.get-unity-info.outputs.version }}
              UNITY_MODULES: ${{ inputs.unity-modules }}
              DOWNLOAD_DIR: ${{ steps.prepare-paths.outputs.download-dir }}
          run: |
              chmod +x "${{ github.action_path }}/scripts/install_unity.sh"
              "${{ github.action_path }}/scripts/install_unity.sh"

        - name: üì± Install Android Tools
          if: contains(inputs.unity-modules, 'android')
          shell: bash
          env:
              UNITY_VERSION: ${{ steps.get-unity-info.outputs.version }}
          run: |
              chmod +x "${{ github.action_path }}/scripts/install_android_tools.sh"
              "${{ github.action_path }}/scripts/install_android_tools.sh"
