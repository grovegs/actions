name: Setup Unity
description: Downloads and installs Unity Editor directly for Windows and macOS platforms. This action bypasses Unity Hub to ensure compatibility with CI/CD environments.

inputs:
  unity-version:
    description: The Unity version to install with revision (e.g., "6000.1.9f1 (ed7b183fd33d)"). If not specified, uses the version from ProjectSettings/ProjectVersion.txt.
    required: false
  unity-modules:
    description: Additional Unity modules to install (comma-separated list, e.g., "android,ios,webgl").
    required: false
    default: ""
  cache:
    description: Whether to cache the Unity installation (true/false).
    required: false
    default: "true"
  project-path:
    description: Path to the Unity project directory.
    required: false
    default: "."

outputs:
  unity-version:
    description: The Unity version that was set up.
    value: ${{ steps.get_unity_info.outputs.version }}
  unity-path:
    description: The path to the Unity installation.
    value: ${{ steps.get_unity_path.outputs.unity_path }}

runs:
  using: composite
  steps:
    - name: ✅ Validate Platform Support
      shell: bash
      run: |
        if [[ "$RUNNER_OS" != "Windows" && "$RUNNER_OS" != "macOS" ]]; then
          echo "::error::Unity is only supported on Windows and macOS platforms"
          echo "::error::Current platform: $RUNNER_OS"
          echo "::error::Please use a Windows or macOS runner for Unity development"
          exit 1
        fi
        echo "::notice::Platform validation successful: $RUNNER_OS"

    - name: 🧬 Get Unity Info
      id: get_unity_info
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_unity_info.sh"
        "${{ github.action_path }}/scripts/get_unity_info.sh" "${{ inputs.project-path }}" "${{ inputs.unity-version }}"

    - name: 🔍 Check Unity Installation
      id: check_unity
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/check_unity.sh"
        "${{ github.action_path }}/scripts/check_unity.sh" "${{ steps.get_unity_info.outputs.version }}"

    - name: 🔧 Prepare Cache Key
      id: prepare_cache_key
      shell: bash
      run: |
        modules="${{ inputs.unity-modules }}"
        sanitized_modules="${modules//,/-}"
        echo "modules_key=${sanitized_modules}" >> $GITHUB_OUTPUT

    - name: 📦 Cache Unity Installation
      if: ${{ inputs.cache == 'true' && steps.check_unity.outputs.is_installed == 'false' }}
      id: cache_unity
      uses: actions/cache@v4
      with:
        path: |
          /Applications/Unity
          C:\Program Files\Unity
        key: unity-direct-${{ steps.get_unity_info.outputs.version }}-${{ runner.os }}-${{ steps.prepare_cache_key.outputs.modules_key }}
        restore-keys: |
          unity-direct-${{ steps.get_unity_info.outputs.version }}-${{ runner.os }}-

    - name: 🎮 Install Unity
      if: ${{ steps.check_unity.outputs.is_installed == 'false' && steps.cache_unity.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/install_unity.sh"
        "${{ github.action_path }}/scripts/install_unity.sh" "${{ steps.get_unity_info.outputs.version }}" "${{ steps.get_unity_info.outputs.revision }}" "${{ inputs.unity-modules }}"

    - name: 📍 Get Unity Path
      id: get_unity_path
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/get_unity_path.sh"
        "${{ github.action_path }}/scripts/get_unity_path.sh" "${{ steps.get_unity_info.outputs.version }}"

    - name: 🔎 Verify Unity Installation
      shell: bash
      run: |
        chmod +x "${{ github.action_path }}/scripts/verify_unity.sh"
        "${{ github.action_path }}/scripts/verify_unity.sh" "${{ steps.get_unity_path.outputs.unity_path }}"

    - name: 📝 Set Unity Environment Variables
      shell: bash
      run: |
        echo "UNITY_PATH=${{ steps.get_unity_path.outputs.unity_path }}" >> $GITHUB_ENV
        echo "UNITY_VERSION=${{ steps.get_unity_info.outputs.version }}" >> $GITHUB_ENV

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "${{ steps.get_unity_path.outputs.unity_path }}" >> $GITHUB_PATH
        else
          echo "${{ steps.get_unity_path.outputs.unity_path }}/Contents/MacOS" >> $GITHUB_PATH
        fi
