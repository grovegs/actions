name: Build Unity
description: Build Unity project for Android and iOS platforms using Build Profiles.

inputs:
    project:
        description: The relative path to the Unity project folder.
        required: true
    version:
        description: The version number for the build output.
        required: true
    platform:
        description: The target platform for the build. Supported values are Android and iOS.
        required: true
    configuration:
        description: The build configuration such as Release or Debug.
        required: false
        default: Release
    filename:
        description: The name of the output file of the build.
        required: true
    profile-name:
        description: The name of the Unity Build Profile to use. If not specified, defaults to platform name.
        required: false
    unity-email:
        description: The Unity account email.
        required: true
    unity-password:
        description: The Unity account password.
        required: true
    unity-license-key:
        description: The Unity license serial key.
        required: true
    android-keystore:
        description: Base64-encoded content of the Android keystore used for signing APK or AAB files.
        required: false
    android-keystore-user:
        description: The alias name in the Android keystore.
        required: false
    android-keystore-password:
        description: The password for the Android keystore.
        required: false
    android-format:
        description: The Android build format to use. Supported values are apk or aab.
        required: false
        default: apk
    ios-team-id:
        description: The Apple Developer Team ID.
        required: false
    ios-certificate:
        description: The Base64-encoded iOS distribution certificate in p12 format.
        required: false
    ios-certificate-password:
        description: The password for the iOS distribution certificate.
        required: false
    ios-provisioning-profile:
        description: The Base64-encoded iOS provisioning profile in mobileprovision format.
        required: false
    ios-provisioning-profile-uuid:
        description: The UUID of the iOS provisioning profile.
        required: false
    ios-export-method:
        description: iOS export method such as ad-hoc for Firebase/testing or app-store for App Store/TestFlight.
        required: false
    build-method:
        description: Custom build method to use such as MyNamespace.MyClass.MyBuildMethod.
        required: false
    cache:
        description: Cache Unity Library, packages, and build tools.
        required: false
        default: "true"

outputs:
    file:
        description: The path to the exported project file.
        value: ${{ steps.build-project.outputs.file }}

runs:
    using: composite
    steps:
        - name: 📋 Get Unity Version
          id: unity-version
          shell: bash
          run: |
              if [ -f "${{ inputs.project }}/ProjectSettings/ProjectVersion.txt" ]; then
                version=$(grep "m_EditorVersion:" "${{ inputs.project }}/ProjectSettings/ProjectVersion.txt" | cut -d' ' -f2)
                echo "version=$version" >> "$GITHUB_OUTPUT"
                echo "::notice::Detected Unity version: $version"
              else
                echo "version=unknown" >> "$GITHUB_OUTPUT"
                echo "::warning::Could not detect Unity version"
              fi

        - name: 🔑 Create Cache Key
          if: inputs.cache == 'true'
          id: cache-key
          shell: bash
          run: |
              echo "::notice::Generating cache key for ${{ inputs.project }}..."

              project_files=$(find "${{ inputs.project }}" -name "*.meta" -o -name "ProjectSettings.asset" -o -name "packages-lock.json" -o -name "Packages/manifest.json" 2>/dev/null | sort || true)

              if [ -n "$project_files" ]; then
                if command -v sha256sum >/dev/null 2>&1; then
                  project_hash=$(echo "$project_files" | xargs cat 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "fallback")
                else
                  project_hash=$(echo "$project_files" | xargs cat 2>/dev/null | shasum -a 256 | cut -d' ' -f1 || echo "fallback")
                fi
              else
                if command -v sha256sum >/dev/null 2>&1; then
                  project_hash=$(echo "${{ inputs.project }}" | sha256sum | cut -d' ' -f1)
                else
                  project_hash=$(echo "${{ inputs.project }}" | shasum -a 256 | cut -d' ' -f1)
                fi
              fi

              cache_key="unity-${{ steps.unity-version.outputs.version }}-${{ inputs.platform }}-${project_hash:0:8}"
              echo "key=$cache_key" >> "$GITHUB_OUTPUT"
              echo "::notice::Cache key: $cache_key"

        - name: 📚 Cache Unity Library
          if: inputs.cache == 'true'
          id: cache-unity-library
          uses: actions/cache@v4
          with:
              path: |
                  ${{ inputs.project }}/Library
                  ${{ inputs.project }}/Temp/UnityLockfile
              key: ${{ steps.cache-key.outputs.key }}
              restore-keys: |
                  unity-${{ steps.unity-version.outputs.version }}-${{ inputs.platform }}-
                  unity-${{ steps.unity-version.outputs.version }}-
                  unity-

        - name: 📦 Cache Unity Packages
          if: inputs.cache == 'true'
          uses: actions/cache@v4
          with:
              path: |
                  ~/Library/Unity/Asset Store-5.x
                  ~/.config/unity3d
              key: unity-packages-${{ runner.os }}-${{ steps.unity-version.outputs.version }}
              restore-keys: |
                  unity-packages-${{ runner.os }}-

        - name: 🤖 Cache Gradle
          if: inputs.platform == 'Android' && inputs.cache == 'true'
          uses: actions/cache@v4
          with:
              path: |
                  ~/.gradle/caches
                  ~/.gradle/wrapper
              key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
              restore-keys: |
                  gradle-${{ runner.os }}-

        - name: 🍎 Cache Derived Data
          if: inputs.platform == 'iOS' && inputs.cache == 'true'
          uses: actions/cache@v4
          with:
              path: |
                  ~/Library/Developer/Xcode/DerivedData
              key: xcode-derived-${{ runner.os }}-${{ hashFiles('**/project.pbxproj') }}
              restore-keys: |
                  xcode-derived-${{ runner.os }}-

        - name: 🧹 Clean Corrupted Cache
          if: inputs.cache == 'true' && steps.cache-unity-library.outputs.cache-hit == 'true'
          shell: bash
          run: |
              echo "::notice::Cache hit - checking integrity..."

              if [ -f "${{ inputs.project }}/Library/LastSceneManagerSetup.txt" ]; then
                if grep -q "corrupted\|error\|failed" "${{ inputs.project }}/Library/LastSceneManagerSetup.txt" 2>/dev/null; then
                  echo "::warning::Detected corrupted cache, cleaning..."
                  rm -rf "${{ inputs.project }}/Library"
                  rm -rf "${{ inputs.project }}/Temp"
                fi
              fi

              if [ -d "${{ inputs.project }}/Library" ] && [ -z "$(ls -A "${{ inputs.project }}/Library" 2>/dev/null)" ]; then
                echo "::warning::Empty Library folder detected, removing..."
                rm -rf "${{ inputs.project }}/Library"
              fi

        - name: 🏗️ Build Project
          id: build-project
          shell: bash
          env:
              PLATFORM: ${{ inputs.platform }}
              PROJECT_DIR: ${{ inputs.project }}
              VERSION: ${{ inputs.version }}
              CONFIGURATION: ${{ inputs.configuration }}
              FILENAME: ${{ inputs.filename }}
              PROFILE_NAME: ${{ inputs.profile-name }}
              UNITY_EMAIL: ${{ inputs.unity-email }}
              UNITY_PASSWORD: ${{ inputs.unity-password }}
              UNITY_LICENSE_KEY: ${{ inputs.unity-license-key }}
              ANDROID_KEYSTORE: ${{ inputs.android-keystore }}
              ANDROID_KEYSTORE_USER: ${{ inputs.android-keystore-user }}
              ANDROID_KEYSTORE_PASSWORD: ${{ inputs.android-keystore-password }}
              ANDROID_FORMAT: ${{ inputs.android-format }}
              IOS_TEAM_ID: ${{ inputs.ios-team-id }}
              IOS_CERTIFICATE: ${{ inputs.ios-certificate }}
              IOS_CERTIFICATE_PASSWORD: ${{ inputs.ios-certificate-password }}
              IOS_PROVISIONING_PROFILE: ${{ inputs.ios-provisioning-profile }}
              IOS_PROVISIONING_PROFILE_UUID: ${{ inputs.ios-provisioning-profile-uuid }}
              IOS_EXPORT_METHOD: ${{ inputs.ios-export-method }}
              BUILD_METHOD: ${{ inputs.build-method }}
              CACHE_ENABLED: ${{ inputs.cache }}
              CACHE_HIT: ${{ steps.cache-unity-library.outputs.cache-hit }}
          run: |
              chmod +x "${{ github.action_path }}/scripts/build_project.sh"
              "${{ github.action_path }}/scripts/build_project.sh"

        - name: 📊 Build Statistics
          shell: bash
          run: |
              echo "::notice::=== Build Statistics ==="
              echo "::notice::Caching enabled: ${{ inputs.cache }}"

              if [ "${{ inputs.cache }}" == "true" ]; then
                echo "::notice::Cache hit: ${{ steps.cache-unity-library.outputs.cache-hit }}"
                echo "::notice::Cache key: ${{ steps.cache-key.outputs.key }}"
              fi

              echo "::notice::Unity version: ${{ steps.unity-version.outputs.version }}"
              echo "::notice::Platform: ${{ inputs.platform }}"

              if [ -d "${{ inputs.project }}/Library" ]; then
                lib_size=$(du -sh "${{ inputs.project }}/Library" 2>/dev/null | cut -f1 || echo "unknown")
                echo "::notice::Library folder size: $lib_size"
              fi
