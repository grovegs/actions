name: Bump Version
description: Calculates and bumps the next version based on the latest Git tag.
inputs:
  version-type:
    description: Type of version bump (major, minor, patch).
    required: true
outputs:
  latest-version:
    description: The latest version, derived from the latest Git tag.
    value: ${{ steps.fetch_version.outputs.latest_version }}
  next-version:
    description: The calculated next version based on the latest version.
    value: ${{ steps.bump_version.outputs.next_version }}
runs:
  using: composite
  steps:
    - name: ✅ Validate Input
      shell: bash
      run: |
        valid_types="major minor patch"
        if [[ ! " $valid_types " =~ " ${{ inputs.version-type }} " ]]; then
          echo "❌ Error: Invalid version-type '${{ inputs.version-type }}'"
          echo "Valid options: $valid_types"
          exit 1
        fi

    - name: 🔖 Fetch Version
      shell: bash
      id: fetch_version
      run: |
        if ! git fetch --tags --quiet 2>/dev/null; then
          echo "⚠️  Warning: Could not fetch tags from remote"
        fi

        all_tags=$(git tag -l 2>/dev/null || echo "")

        if [ -z "$all_tags" ]; then
          latest_version="0.0.0"
        else
          latest_version=$(echo "$all_tags" | \
            grep -E "^v?[0-9]+\.[0-9]+\.[0-9]+$" | \
            sed 's/^v//' | \
            sort -V | \
            tail -n 1) || true
          
          if [ -z "$latest_version" ]; then
            latest_version="0.0.0"
          fi
        fi

        echo "latest_version=$latest_version" >> $GITHUB_OUTPUT

    - name: 🧮 Bump Version
      shell: bash
      id: bump_version
      run: |
        current_version="${{ steps.fetch_version.outputs.latest_version }}"
        version_type="${{ inputs.version-type }}"

        if [[ "$current_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          major="${BASH_REMATCH[1]}"
          minor="${BASH_REMATCH[2]}"
          patch="${BASH_REMATCH[3]}"
        else
          echo "❌ Error: Invalid version format: $current_version"
          exit 1
        fi

        case "$version_type" in
          major)
            next_version="$((major + 1)).0.0"
            ;;
          minor)
            next_version="$major.$((minor + 1)).0"
            ;;
          patch)
            next_version="$major.$minor.$((patch + 1))"
            ;;
        esac

        echo "next_version=$next_version" >> $GITHUB_OUTPUT
